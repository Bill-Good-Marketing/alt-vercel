
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  fullName: 'fullName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  password: 'password',
  enabled: 'enabled',
  type: 'type',
  tenetId: 'tenetId',
  system: 'system',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  fullName: 'fullName',
  tenetId: 'tenetId',
  importantNotes: 'importantNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  status: 'status',
  lifecycleStage: 'lifecycleStage',
  lastContactedDate: 'lastContactedDate',
  followUpDate: 'followUpDate',
  householdId: 'householdId',
  householdStatus: 'householdStatus',
  companyId: 'companyId',
  position: 'position',
  companyStatus: 'companyStatus',
  headOfHouseholdId: 'headOfHouseholdId',
  industry: 'industry',
  website: 'website',
  size: 'size',
  primaryContactId: 'primaryContactId',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.ContactRelationshipScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  type: 'type',
  established: 'established',
  notes: 'notes'
};

exports.Prisma.ActivityStepScalarFieldEnum = {
  id: 'id',
  title: 'title',
  completed: 'completed',
  activityId: 'activityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId',
  type: 'type',
  order: 'order'
};

exports.Prisma.ActivityStepUserJoinScalarFieldEnum = {
  activityStepId: 'activityStepId',
  userId: 'userId'
};

exports.Prisma.UserWaypointJoinScalarFieldEnum = {
  userId: 'userId',
  waypointId: 'waypointId'
};

exports.Prisma.ActivityWaypointScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  summary: 'summary',
  status: 'status',
  order: 'order',
  actualStart: 'actualStart',
  dueDate: 'dueDate',
  actualEnd: 'actualEnd',
  activityId: 'activityId',
  templateId: 'templateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId'
};

exports.Prisma.TemplateAssignmentScalarFieldEnum = {
  id: 'id',
  specificUserId: 'specificUserId',
  specificRole: 'specificRole',
  activityTemplateId: 'activityTemplateId',
  waypointTemplateId: 'waypointTemplateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId'
};

exports.Prisma.ActivityWaypointTemplateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  defaultStatus: 'defaultStatus',
  order: 'order',
  dateOffsetType: 'dateOffsetType',
  dueDate: 'dueDate',
  parentActivityId: 'parentActivityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId'
};

exports.Prisma.ActivityTemplateStepScalarFieldEnum = {
  id: 'id',
  order: 'order',
  title: 'title',
  type: 'type',
  activityTemplateId: 'activityTemplateId',
  tenetId: 'tenetId'
};

exports.Prisma.ActivityTemplateStepAssignmentScalarFieldEnum = {
  id: 'id',
  specificUserId: 'specificUserId',
  specificRole: 'specificRole',
  activityTemplateStepId: 'activityTemplateStepId',
  tenetId: 'tenetId'
};

exports.Prisma.ActivityTemplateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  defaultPriority: 'defaultPriority',
  defaultStatus: 'defaultStatus',
  taskScheduleType: 'taskScheduleType',
  dateOffsetType: 'dateOffsetType',
  startDate: 'startDate',
  endDate: 'endDate',
  startRelativeToId: 'startRelativeToId',
  parentWaypointId: 'parentWaypointId',
  parentActivityId: 'parentActivityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId',
  order: 'order'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  parentActivityId: 'parentActivityId',
  parentWaypointId: 'parentWaypointId',
  templateId: 'templateId',
  taskScheduleType: 'taskScheduleType',
  startDate: 'startDate',
  endDate: 'endDate',
  completedAt: 'completedAt',
  description: 'description',
  priority: 'priority',
  status: 'status',
  assignedById: 'assignedById',
  phoneNumber: 'phoneNumber',
  location: 'location',
  holdReason: 'holdReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  order: 'order',
  opportunityId: 'opportunityId'
};

exports.Prisma.ContactTimelineEventScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  waypointId: 'waypointId',
  opportunityId: 'opportunityId',
  noteId: 'noteId',
  extraInfo: 'extraInfo',
  userId: 'userId',
  tenetId: 'tenetId',
  eventType: 'eventType',
  relationshipType: 'relationshipType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenetId: 'tenetId',
  type: 'type',
  details: 'details',
  referenceId: 'referenceId',
  reference: 'reference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactTimelineEventContactJoinScalarFieldEnum = {
  contactEventId: 'contactEventId',
  contactId: 'contactId',
  type: 'type'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  waypointId: 'waypointId',
  activityId: 'activityId',
  contactId: 'contactId',
  opportunityId: 'opportunityId',
  tenetId: 'tenetId',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  noteType: 'noteType'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  activityId: 'activityId',
  tenetId: 'tenetId'
};

exports.Prisma.ActivityContactJoinScalarFieldEnum = {
  activityId: 'activityId',
  contactId: 'contactId'
};

exports.Prisma.ActivityUserJoinScalarFieldEnum = {
  activityId: 'activityId',
  userId: 'userId'
};

exports.Prisma.ContactEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  isPrimary: 'isPrimary',
  contactId: 'contactId',
  tenetId: 'tenetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactPhoneScalarFieldEnum = {
  id: 'id',
  number: 'number',
  type: 'type',
  isPrimary: 'isPrimary',
  contactId: 'contactId',
  tenetId: 'tenetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  type: 'type',
  primary: 'primary',
  contactId: 'contactId',
  tenetId: 'tenetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  timezone: 'timezone'
};

exports.Prisma.ConfigOptionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value'
};

exports.Prisma.ImportantDateScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  contactId: 'contactId',
  tenetId: 'tenetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpportunityScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  value: 'value',
  probability: 'probability',
  expectedCloseDate: 'expectedCloseDate',
  actualCloseDate: 'actualCloseDate',
  status: 'status',
  statusHistory: 'statusHistory',
  deleted: 'deleted',
  deletedAt: 'deletedAt',
  tenetId: 'tenetId',
  expectedValue: 'expectedValue'
};

exports.Prisma.ContactOpportunityJoinScalarFieldEnum = {
  contactId: 'contactId',
  opportunityId: 'opportunityId'
};

exports.Prisma.UserOpportunityJoinScalarFieldEnum = {
  userId: 'userId',
  opportunityId: 'opportunityId'
};

exports.Prisma.OpportunityProductScalarFieldEnum = {
  id: 'id',
  price: 'price',
  order: 'order',
  commission: 'commission',
  opportunityId: 'opportunityId',
  productTypeId: 'productTypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductTypeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  defaultCommission: 'defaultCommission',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenetId: 'tenetId'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  userEmail: 'userEmail',
  tenetId: 'tenetId',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  severity: 'severity',
  stacktrace: 'stacktrace',
  source: 'source',
  secureDetails: 'secureDetails'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  refresh: 'refresh'
};

exports.Prisma.TZDataScalarFieldEnum = {
  id: 'id',
  name: 'name',
  provinceName: 'provinceName',
  countryCode: 'countryCode',
  tz: 'tz'
};

exports.Prisma.TestObjectScalarFieldEnum = {
  id: 'id',
  required: 'required',
  persisted: 'persisted'
};

exports.Prisma.WrappedObjectScalarFieldEnum = {
  id: 'id',
  persisted: 'persisted',
  testObjectId: 'testObjectId'
};

exports.Prisma.JoinTestObjectScalarFieldEnum = {
  testObjectId: 'testObjectId',
  joinedObjectId: 'joinedObjectId',
  joinProperty: 'joinProperty'
};

exports.Prisma.JoinTestObject2ScalarFieldEnum = {
  id: 'id',
  testObjectId: 'testObjectId',
  joinedObjectId: 'joinedObjectId',
  joinProperty: 'joinProperty'
};

exports.Prisma.JoinedObject1ScalarFieldEnum = {
  id: 'id',
  persisted: 'persisted'
};

exports.Prisma.JoinedObject2ScalarFieldEnum = {
  id: 'id',
  persisted: 'persisted'
};

exports.Prisma.JoinSelfReferenceScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  joinProperty: 'joinProperty'
};

exports.Prisma.SelfReferencialJoinModelScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AccessGroup = exports.$Enums.AccessGroup = {
  SYSADMIN: 'SYSADMIN',
  ADMIN: 'ADMIN',
  CLIENT: 'CLIENT'
};

exports.ContactType = exports.$Enums.ContactType = {
  INDIVIDUAL: 'INDIVIDUAL',
  HOUSEHOLD: 'HOUSEHOLD',
  COMPANY: 'COMPANY'
};

exports.ContactStatus = exports.$Enums.ContactStatus = {
  CLIENT: 'CLIENT',
  LEAD: 'LEAD',
  OFF: 'OFF',
  PERM_OFF: 'PERM_OFF',
  PROSPECT: 'PROSPECT',
  STRATEGIC_PARTNER: 'STRATEGIC_PARTNER',
  PLAN_PARTICIPANT: 'PLAN_PARTICIPANT',
  OTHER: 'OTHER'
};

exports.LifecycleStage = exports.$Enums.LifecycleStage = {
  ACCUMULATION: 'ACCUMULATION',
  PRE_RETIREMENT: 'PRE_RETIREMENT',
  RETIREMENT: 'RETIREMENT',
  SEMI_RETIRED: 'SEMI_RETIRED',
  NOT_ASSIGNED: 'NOT_ASSIGNED',
  PRE_INVESTMENT: 'PRE_INVESTMENT',
  LEGACY: 'LEGACY'
};

exports.HouseholdRelationshipStatus = exports.$Enums.HouseholdRelationshipStatus = {
  HEAD_OF_HOUSEHOLD: 'HEAD_OF_HOUSEHOLD',
  SPOUSE: 'SPOUSE',
  SON: 'SON',
  DAUGHTER: 'DAUGHTER',
  AUNT: 'AUNT',
  UNCLE: 'UNCLE',
  FATHER: 'FATHER',
  MOTHER: 'MOTHER',
  BROTHER: 'BROTHER',
  SISTER: 'SISTER',
  NIECE: 'NIECE',
  NEPHEW: 'NEPHEW'
};

exports.CompanyRelationshipStatus = exports.$Enums.CompanyRelationshipStatus = {
  OWNS_COMPANY: 'OWNS_COMPANY',
  C_SUTIE: 'C_SUTIE',
  EXECUTIVE: 'EXECUTIVE',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE',
  CONTRACTOR: 'CONTRACTOR',
  PARTNER: 'PARTNER',
  CHAIRMAN_OF_THE_BOARD: 'CHAIRMAN_OF_THE_BOARD',
  BOARD_MEMBER: 'BOARD_MEMBER'
};

exports.ActivityStepType = exports.$Enums.ActivityStepType = {
  CHECK: 'CHECK',
  ATTACHMENT: 'ATTACHMENT',
  FORM: 'FORM'
};

exports.ActivityStatus = exports.$Enums.ActivityStatus = {
  NOT_STARTED: 'NOT_STARTED',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING_FOR_INFO: 'WAITING_FOR_INFO',
  PAUSED: 'PAUSED',
  REASSIGNED: 'REASSIGNED',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  IN_REVIEW: 'IN_REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED',
  SCHEDULED: 'SCHEDULED'
};

exports.Role = exports.$Enums.Role = {
  COMPUTER_OPERATOR: 'COMPUTER_OPERATOR',
  ADVISOR: 'ADVISOR',
  SERVICE_ASSISTANT: 'SERVICE_ASSISTANT',
  SALES_ASSISTANT: 'SALES_ASSISTANT'
};

exports.DateOffsetType = exports.$Enums.DateOffsetType = {
  WAYPOINT: 'WAYPOINT',
  ACTIVITY: 'ACTIVITY',
  PATH_START: 'PATH_START'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  PATH: 'PATH',
  WAYPOINT: 'WAYPOINT',
  TASK: 'TASK',
  SCHEDULED: 'SCHEDULED'
};

exports.ActivityPriority = exports.$Enums.ActivityPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.TaskScheduleType = exports.$Enums.TaskScheduleType = {
  COMMUNICATION: 'COMMUNICATION',
  COMMUNICATION_CALL: 'COMMUNICATION_CALL',
  COMMUNICATION_CALL_OUTBOUND: 'COMMUNICATION_CALL_OUTBOUND',
  COMMUNICATION_CALL_INBOUND: 'COMMUNICATION_CALL_INBOUND',
  COMMUNICATION_MESSAGE: 'COMMUNICATION_MESSAGE',
  COMMUNICATION_EMAIL: 'COMMUNICATION_EMAIL',
  MEETING: 'MEETING',
  MEETING_VIRTUAL: 'MEETING_VIRTUAL',
  MEETING_IN_PERSON: 'MEETING_IN_PERSON',
  MEETING_CLIENT: 'MEETING_CLIENT',
  MEETING_INTERNAL: 'MEETING_INTERNAL',
  MEETING_PERSONAL: 'MEETING_PERSONAL',
  FINANCIAL_PLANNING: 'FINANCIAL_PLANNING',
  FINANCIAL_PLANNING_PORTFOLIO_REVIEW: 'FINANCIAL_PLANNING_PORTFOLIO_REVIEW',
  FINANCIAL_PLANNING_INVESTMENT_STRATEGY: 'FINANCIAL_PLANNING_INVESTMENT_STRATEGY',
  FINANCIAL_PLANNING_TAX_PLANNING: 'FINANCIAL_PLANNING_TAX_PLANNING',
  FINANCIAL_PLANNING_ESTATE_PLANNING: 'FINANCIAL_PLANNING_ESTATE_PLANNING',
  FINANCIAL_PLANNING_RETIREMENT_PLANNING: 'FINANCIAL_PLANNING_RETIREMENT_PLANNING',
  FINANCIAL_PLANNING_RISK_ASSESSMENT: 'FINANCIAL_PLANNING_RISK_ASSESSMENT',
  TASK: 'TASK',
  TASK_ADMIN: 'TASK_ADMIN',
  TASK_COMPLIANCE_CHECK: 'TASK_COMPLIANCE_CHECK',
  TASK_DOCUMENT_PREPARATION: 'TASK_DOCUMENT_PREPARATION',
  TASK_PAPERWORK: 'TASK_PAPERWORK',
  TASK_TODO: 'TASK_TODO',
  HOLD: 'HOLD',
  HOLD_PRIVATE: 'HOLD_PRIVATE',
  HOLD_BLOCKED: 'HOLD_BLOCKED',
  HOLD_TENTATIVE: 'HOLD_TENTATIVE'
};

exports.ContactTimelineEventType = exports.$Enums.ContactTimelineEventType = {
  NOTE: 'NOTE',
  ACTIVITY_CREATED: 'ACTIVITY_CREATED',
  ACTIVITY_COMPLETED: 'ACTIVITY_COMPLETED',
  ACTIVITY_CANCELLED: 'ACTIVITY_CANCELLED',
  ACTIVITY_FAILED: 'ACTIVITY_FAILED',
  ACTIVITY_STATUS_CHANGED: 'ACTIVITY_STATUS_CHANGED',
  ACTIVITY_REMOVED: 'ACTIVITY_REMOVED',
  ACTIVITY_STEP_CHANGED: 'ACTIVITY_STEP_CHANGED',
  ACTIVITY_ADDED_TO: 'ACTIVITY_ADDED_TO',
  ACTIVITY_REMOVED_FROM: 'ACTIVITY_REMOVED_FROM',
  WAYPOINT_CREATED: 'WAYPOINT_CREATED',
  CONTACT_CREATED: 'CONTACT_CREATED',
  CONTACT_REMOVED: 'CONTACT_REMOVED',
  MEMBER_ADDED: 'MEMBER_ADDED',
  MEMBER_REMOVED: 'MEMBER_REMOVED',
  RELATIONSHIP_ADDED: 'RELATIONSHIP_ADDED',
  RELATIONSHIP_REMOVED: 'RELATIONSHIP_REMOVED',
  OPPORTUNITY_CREATED: 'OPPORTUNITY_CREATED',
  OPPORTUNITY_REMOVED: 'OPPORTUNITY_REMOVED',
  OPPORTUNITY_WON: 'OPPORTUNITY_WON',
  OPPORTUNITY_LOST: 'OPPORTUNITY_LOST',
  OPPORTUNITY_CANCELLED: 'OPPORTUNITY_CANCELLED',
  OPPORTUNITY_STATUS_CHANGED: 'OPPORTUNITY_STATUS_CHANGED',
  EMAIL_SENT: 'EMAIL_SENT',
  EMAIL_RECEIVED: 'EMAIL_RECEIVED'
};

exports.AuditEventType = exports.$Enums.AuditEventType = {
  READ: 'READ',
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

exports.Auditable = exports.$Enums.Auditable = {
  CONTACT: 'CONTACT',
  NOTE: 'NOTE',
  ACTIVITY: 'ACTIVITY',
  OPPORTUNITY: 'OPPORTUNITY',
  USER: 'USER',
  ADDRESS: 'ADDRESS',
  CONTACT_EMAIL: 'CONTACT_EMAIL',
  CONTACT_PHONE: 'CONTACT_PHONE',
  IMPORTANT_DATE: 'IMPORTANT_DATE',
  ATTACHMENT: 'ATTACHMENT'
};

exports.ContactTimelineEventJoinType = exports.$Enums.ContactTimelineEventJoinType = {
  ACTIVITY_CONTACT: 'ACTIVITY_CONTACT',
  MEMBER_CONTACT: 'MEMBER_CONTACT',
  MEMBER_PARENT: 'MEMBER_PARENT',
  CONTACT_TARGET: 'CONTACT_TARGET',
  OPPORTUNITY_CONTACT: 'OPPORTUNITY_CONTACT',
  RELATIONSHIP_FROM: 'RELATIONSHIP_FROM',
  RELATIONSHIP_TO: 'RELATIONSHIP_TO'
};

exports.NoteType = exports.$Enums.NoteType = {
  NOTE: 'NOTE',
  CALL: 'CALL',
  CALL_OUTBOUND: 'CALL_OUTBOUND',
  CALL_INBOUND: 'CALL_INBOUND'
};

exports.PhoneType = exports.$Enums.PhoneType = {
  HOME: 'HOME',
  WORK: 'WORK',
  VACATION: 'VACATION',
  MOBILE: 'MOBILE',
  OTHER: 'OTHER'
};

exports.AddressType = exports.$Enums.AddressType = {
  HOME: 'HOME',
  WORK: 'WORK',
  VACATION: 'VACATION',
  OTHER: 'OTHER'
};

exports.ImportantDateType = exports.$Enums.ImportantDateType = {
  ANNIVERSARY: 'ANNIVERSARY',
  RETIREMENT: 'RETIREMENT',
  BIRTHDAY: 'BIRTHDAY'
};

exports.OpportunityStatus = exports.$Enums.OpportunityStatus = {
  UNSTARTED: 'UNSTARTED',
  IDENTIFIED: 'IDENTIFIED',
  FIRST_APPOINTMENT: 'FIRST_APPOINTMENT',
  SECOND_APPOINTMENT: 'SECOND_APPOINTMENT',
  THIRD_APPOINTMENT: 'THIRD_APPOINTMENT',
  CLOSING: 'CLOSING',
  PAPERWORK: 'PAPERWORK',
  WON: 'WON',
  LOST: 'LOST',
  CANCELLED: 'CANCELLED'
};

exports.LogLevel = exports.$Enums.LogLevel = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARNING: 'WARNING',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  Tenet: 'Tenet',
  User: 'User',
  Contact: 'Contact',
  ContactRelationship: 'ContactRelationship',
  ActivityStep: 'ActivityStep',
  ActivityStepUserJoin: 'ActivityStepUserJoin',
  UserWaypointJoin: 'UserWaypointJoin',
  ActivityWaypoint: 'ActivityWaypoint',
  TemplateAssignment: 'TemplateAssignment',
  ActivityWaypointTemplate: 'ActivityWaypointTemplate',
  ActivityTemplateStep: 'ActivityTemplateStep',
  ActivityTemplateStepAssignment: 'ActivityTemplateStepAssignment',
  ActivityTemplate: 'ActivityTemplate',
  Activity: 'Activity',
  ContactTimelineEvent: 'ContactTimelineEvent',
  AuditEvent: 'AuditEvent',
  ContactTimelineEventContactJoin: 'ContactTimelineEventContactJoin',
  Note: 'Note',
  Attachment: 'Attachment',
  ActivityContactJoin: 'ActivityContactJoin',
  ActivityUserJoin: 'ActivityUserJoin',
  ContactEmail: 'ContactEmail',
  ContactPhone: 'ContactPhone',
  Address: 'Address',
  ConfigOption: 'ConfigOption',
  ImportantDate: 'ImportantDate',
  Opportunity: 'Opportunity',
  ContactOpportunityJoin: 'ContactOpportunityJoin',
  UserOpportunityJoin: 'UserOpportunityJoin',
  OpportunityProduct: 'OpportunityProduct',
  ProductType: 'ProductType',
  Log: 'Log',
  Token: 'Token',
  TZData: 'TZData',
  TestObject: 'TestObject',
  WrappedObject: 'WrappedObject',
  JoinTestObject: 'JoinTestObject',
  JoinTestObject2: 'JoinTestObject2',
  JoinedObject1: 'JoinedObject1',
  JoinedObject2: 'JoinedObject2',
  JoinSelfReference: 'JoinSelfReference',
  SelfReferencialJoinModel: 'SelfReferencialJoinModel'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
